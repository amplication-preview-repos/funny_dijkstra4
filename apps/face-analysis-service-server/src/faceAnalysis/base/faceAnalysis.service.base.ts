/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FaceAnalysis as PrismaFaceAnalysis,
  FaceDetectionEvent as PrismaFaceDetectionEvent,
} from "@prisma/client";

export class FaceAnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FaceAnalysisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.faceAnalysis.count(args);
  }

  async faceAnalyses(
    args: Prisma.FaceAnalysisFindManyArgs
  ): Promise<PrismaFaceAnalysis[]> {
    return this.prisma.faceAnalysis.findMany(args);
  }
  async faceAnalysis(
    args: Prisma.FaceAnalysisFindUniqueArgs
  ): Promise<PrismaFaceAnalysis | null> {
    return this.prisma.faceAnalysis.findUnique(args);
  }
  async createFaceAnalysis(
    args: Prisma.FaceAnalysisCreateArgs
  ): Promise<PrismaFaceAnalysis> {
    return this.prisma.faceAnalysis.create(args);
  }
  async updateFaceAnalysis(
    args: Prisma.FaceAnalysisUpdateArgs
  ): Promise<PrismaFaceAnalysis> {
    return this.prisma.faceAnalysis.update(args);
  }
  async deleteFaceAnalysis(
    args: Prisma.FaceAnalysisDeleteArgs
  ): Promise<PrismaFaceAnalysis> {
    return this.prisma.faceAnalysis.delete(args);
  }

  async findFaceDetectionEvents(
    parentId: string,
    args: Prisma.FaceDetectionEventFindManyArgs
  ): Promise<PrismaFaceDetectionEvent[]> {
    return this.prisma.faceAnalysis
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .faceDetectionEvents(args);
  }
}
