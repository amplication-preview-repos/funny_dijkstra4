/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FaceAnalysis } from "./FaceAnalysis";
import { FaceAnalysisCountArgs } from "./FaceAnalysisCountArgs";
import { FaceAnalysisFindManyArgs } from "./FaceAnalysisFindManyArgs";
import { FaceAnalysisFindUniqueArgs } from "./FaceAnalysisFindUniqueArgs";
import { CreateFaceAnalysisArgs } from "./CreateFaceAnalysisArgs";
import { UpdateFaceAnalysisArgs } from "./UpdateFaceAnalysisArgs";
import { DeleteFaceAnalysisArgs } from "./DeleteFaceAnalysisArgs";
import { FaceDetectionEventFindManyArgs } from "../../faceDetectionEvent/base/FaceDetectionEventFindManyArgs";
import { FaceDetectionEvent } from "../../faceDetectionEvent/base/FaceDetectionEvent";
import { FaceAnalysisService } from "../faceAnalysis.service";
@graphql.Resolver(() => FaceAnalysis)
export class FaceAnalysisResolverBase {
  constructor(protected readonly service: FaceAnalysisService) {}

  async _faceAnalysesMeta(
    @graphql.Args() args: FaceAnalysisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FaceAnalysis])
  async faceAnalyses(
    @graphql.Args() args: FaceAnalysisFindManyArgs
  ): Promise<FaceAnalysis[]> {
    return this.service.faceAnalyses(args);
  }

  @graphql.Query(() => FaceAnalysis, { nullable: true })
  async faceAnalysis(
    @graphql.Args() args: FaceAnalysisFindUniqueArgs
  ): Promise<FaceAnalysis | null> {
    const result = await this.service.faceAnalysis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FaceAnalysis)
  async createFaceAnalysis(
    @graphql.Args() args: CreateFaceAnalysisArgs
  ): Promise<FaceAnalysis> {
    return await this.service.createFaceAnalysis({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FaceAnalysis)
  async updateFaceAnalysis(
    @graphql.Args() args: UpdateFaceAnalysisArgs
  ): Promise<FaceAnalysis | null> {
    try {
      return await this.service.updateFaceAnalysis({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FaceAnalysis)
  async deleteFaceAnalysis(
    @graphql.Args() args: DeleteFaceAnalysisArgs
  ): Promise<FaceAnalysis | null> {
    try {
      return await this.service.deleteFaceAnalysis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FaceDetectionEvent], {
    name: "faceDetectionEvents",
  })
  async findFaceDetectionEvents(
    @graphql.Parent() parent: FaceAnalysis,
    @graphql.Args() args: FaceDetectionEventFindManyArgs
  ): Promise<FaceDetectionEvent[]> {
    const results = await this.service.findFaceDetectionEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
