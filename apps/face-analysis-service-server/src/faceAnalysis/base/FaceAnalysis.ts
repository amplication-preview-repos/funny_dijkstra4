/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  Min,
  Max,
  IsOptional,
  IsDate,
  IsEnum,
  ValidateNested,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumFaceAnalysisEyeColor } from "./EnumFaceAnalysisEyeColor";
import { FaceDetectionEvent } from "../../faceDetectionEvent/base/FaceDetectionEvent";
import { EnumFaceAnalysisFaceShape } from "./EnumFaceAnalysisFaceShape";
import { EnumFaceAnalysisGender } from "./EnumFaceAnalysisGender";
import { EnumFaceAnalysisSkinTone } from "./EnumFaceAnalysisSkinTone";

@ObjectType()
class FaceAnalysis {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  age!: number | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  emotions!: JsonValue;

  @ApiProperty({
    required: false,
    enum: EnumFaceAnalysisEyeColor,
  })
  @IsEnum(EnumFaceAnalysisEyeColor)
  @IsOptional()
  @Field(() => EnumFaceAnalysisEyeColor, {
    nullable: true,
  })
  eyeColor?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => [FaceDetectionEvent],
  })
  @ValidateNested()
  @Type(() => FaceDetectionEvent)
  @IsOptional()
  faceDetectionEvents?: Array<FaceDetectionEvent>;

  @ApiProperty({
    required: false,
    enum: EnumFaceAnalysisFaceShape,
  })
  @IsEnum(EnumFaceAnalysisFaceShape)
  @IsOptional()
  @Field(() => EnumFaceAnalysisFaceShape, {
    nullable: true,
  })
  faceShape?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumFaceAnalysisGender,
  })
  @IsEnum(EnumFaceAnalysisGender)
  @IsOptional()
  @Field(() => EnumFaceAnalysisGender, {
    nullable: true,
  })
  gender?: "Option1" | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  imageUrl!: JsonValue;

  @ApiProperty({
    required: false,
    enum: EnumFaceAnalysisSkinTone,
  })
  @IsEnum(EnumFaceAnalysisSkinTone)
  @IsOptional()
  @Field(() => EnumFaceAnalysisSkinTone, {
    nullable: true,
  })
  skinTone?: "Option1" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  timestamp!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { FaceAnalysis as FaceAnalysis };
