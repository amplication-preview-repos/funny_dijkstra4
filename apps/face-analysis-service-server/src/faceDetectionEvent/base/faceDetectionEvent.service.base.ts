/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FaceDetectionEvent as PrismaFaceDetectionEvent,
  Camera as PrismaCamera,
  FaceAnalysis as PrismaFaceAnalysis,
} from "@prisma/client";

export class FaceDetectionEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FaceDetectionEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.faceDetectionEvent.count(args);
  }

  async faceDetectionEvents(
    args: Prisma.FaceDetectionEventFindManyArgs
  ): Promise<PrismaFaceDetectionEvent[]> {
    return this.prisma.faceDetectionEvent.findMany(args);
  }
  async faceDetectionEvent(
    args: Prisma.FaceDetectionEventFindUniqueArgs
  ): Promise<PrismaFaceDetectionEvent | null> {
    return this.prisma.faceDetectionEvent.findUnique(args);
  }
  async createFaceDetectionEvent(
    args: Prisma.FaceDetectionEventCreateArgs
  ): Promise<PrismaFaceDetectionEvent> {
    return this.prisma.faceDetectionEvent.create(args);
  }
  async updateFaceDetectionEvent(
    args: Prisma.FaceDetectionEventUpdateArgs
  ): Promise<PrismaFaceDetectionEvent> {
    return this.prisma.faceDetectionEvent.update(args);
  }
  async deleteFaceDetectionEvent(
    args: Prisma.FaceDetectionEventDeleteArgs
  ): Promise<PrismaFaceDetectionEvent> {
    return this.prisma.faceDetectionEvent.delete(args);
  }

  async getCamera(parentId: string): Promise<PrismaCamera | null> {
    return this.prisma.faceDetectionEvent
      .findUnique({
        where: { id: parentId },
      })
      .camera();
  }

  async getFaceAnalysis(parentId: string): Promise<PrismaFaceAnalysis | null> {
    return this.prisma.faceDetectionEvent
      .findUnique({
        where: { id: parentId },
      })
      .faceAnalysis();
  }
}
