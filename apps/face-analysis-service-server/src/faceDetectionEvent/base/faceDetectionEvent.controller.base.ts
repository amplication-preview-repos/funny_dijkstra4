/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FaceDetectionEventService } from "../faceDetectionEvent.service";
import { FaceDetectionEventCreateInput } from "./FaceDetectionEventCreateInput";
import { FaceDetectionEvent } from "./FaceDetectionEvent";
import { FaceDetectionEventFindManyArgs } from "./FaceDetectionEventFindManyArgs";
import { FaceDetectionEventWhereUniqueInput } from "./FaceDetectionEventWhereUniqueInput";
import { FaceDetectionEventUpdateInput } from "./FaceDetectionEventUpdateInput";

export class FaceDetectionEventControllerBase {
  constructor(protected readonly service: FaceDetectionEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FaceDetectionEvent })
  async createFaceDetectionEvent(
    @common.Body() data: FaceDetectionEventCreateInput
  ): Promise<FaceDetectionEvent> {
    return await this.service.createFaceDetectionEvent({
      data: {
        ...data,

        camera: data.camera
          ? {
              connect: data.camera,
            }
          : undefined,

        faceAnalysis: data.faceAnalysis
          ? {
              connect: data.faceAnalysis,
            }
          : undefined,
      },
      select: {
        camera: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        faceAnalysis: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FaceDetectionEvent] })
  @ApiNestedQuery(FaceDetectionEventFindManyArgs)
  async faceDetectionEvents(
    @common.Req() request: Request
  ): Promise<FaceDetectionEvent[]> {
    const args = plainToClass(FaceDetectionEventFindManyArgs, request.query);
    return this.service.faceDetectionEvents({
      ...args,
      select: {
        camera: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        faceAnalysis: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FaceDetectionEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async faceDetectionEvent(
    @common.Param() params: FaceDetectionEventWhereUniqueInput
  ): Promise<FaceDetectionEvent | null> {
    const result = await this.service.faceDetectionEvent({
      where: params,
      select: {
        camera: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        faceAnalysis: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FaceDetectionEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFaceDetectionEvent(
    @common.Param() params: FaceDetectionEventWhereUniqueInput,
    @common.Body() data: FaceDetectionEventUpdateInput
  ): Promise<FaceDetectionEvent | null> {
    try {
      return await this.service.updateFaceDetectionEvent({
        where: params,
        data: {
          ...data,

          camera: data.camera
            ? {
                connect: data.camera,
              }
            : undefined,

          faceAnalysis: data.faceAnalysis
            ? {
                connect: data.faceAnalysis,
              }
            : undefined,
        },
        select: {
          camera: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          faceAnalysis: {
            select: {
              id: true,
            },
          },

          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FaceDetectionEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFaceDetectionEvent(
    @common.Param() params: FaceDetectionEventWhereUniqueInput
  ): Promise<FaceDetectionEvent | null> {
    try {
      return await this.service.deleteFaceDetectionEvent({
        where: params,
        select: {
          camera: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          faceAnalysis: {
            select: {
              id: true,
            },
          },

          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
